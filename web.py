import logging
import os
import json
import secrets
from datetime import datetime, timedelta
import asyncio

import httpx  # Using httpx for asynchronous HTTP requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# --- Configuration ---
TELEGRAM_BOT_TOKEN = "8379093665:AAFKQKg4K8Zsi0TS5b2p2evmSvbcBNSi_YQ"
LITESHORT_API_KEY = "3872aef59e2371b1a6db2155cfa6c7a18aa08d64"

# --- NEW: Add your Telegram user ID here ---
ADMIN_IDS = [1106151237]  # <--- IMPORTANT: REPLACE 123456789 WITH YOUR NUMERIC TELEGRAM ID

LITESHORT_API_URL = "https://liteshort.com/api"
AUTHENTICATION_EXPIRATION_HOURS = 24
FILE_AUTO_DELETE_MINUTES = 20
USER_DATA_FILE = "user_data.json"
FILE_LINKS_FILE = "file_links.json"
BATCH_FILE_LIMIT = 15

# --- Translations ---
translations = {
    'en': {
        "choose_language": "Please select your language:",
        "auth_required_header": "ЁЯФР <b>Human Verification Required!</b> ЁЯФР",
        "auth_required_body": (
            "To keep things secure, please prove you're not a robot to get your file.\n\n"
            "1я╕ПтГг Click the magical button below.\n"
            "2я╕ПтГг You'll see a quick ad тАУ just wait and click 'Skip'.\n"
            "3я╕ПтГг Poof! You'll be redirected back here to finish.\n\n"
            "Easy peasy! тЬи"
        ),
        "auth_button": "тЬи Click Here to Authenticate тЬи",
        "auth_link_error": "ЁЯШе Oh snap! Something went wrong while creating your special authentication link. Please try again.",
        "auth_success_header": "ЁЯОЙ <b>Authentication Successful!</b> ЁЯОЙ",
        "auth_success_body": "Welcome aboard, {user_mention}! You're all set to share and receive files.",
        "auth_fail_header": "тЭМ <b>Authentication Failed!</b> тЭМ",
        "auth_fail_body": "That token is invalid or has expired. Please use /start to get a fresh link.",
        "already_authenticated": "ЁЯСН You're all good! You are already authenticated and ready to go! ЁЯЪА",
        "getlink_not_authenticated": "тЬЛ Hold on! You need to be authenticated to use this command. Just type /start to begin!",
        "getlink_reply_prompt": "ЁЯТб To generate a link, please reply to the message containing the file with the `/getlink` command.",
        "getlink_no_file": "ЁЯдФ Hmm, the message you replied to doesn't seem to have a file I can handle. Please reply to a document, photo, video, or audio file.",
        "getlink_success_header": "тЬи <b>Your Sharable Link is Ready!</b> тЬи",
        "getlink_success_body": "<b>File:</b> <code>{file_name}</code>\n\nAnyone who clicks this button will need to authenticate before they can receive the file. Share it wisely! ЁЯСЗ",
        "getlink_button": "ЁЯУВ Get File ЁЯУВ",
        "help_header": "ЁЯУЦ <b>Bot Commands & Guide</b> ЁЯУЦ",
        "help_body": (
            "Here's how you can use me:\n\n"
            "ЁЯФС /start - Begins the authentication process.\n\n"
            "ЁЯФЧ /getlink - Reply to a file to get a secure link.\n\n"
            "ЁЯЧВя╕П /batch - Start collecting multiple files (up to 15) to create a single link. Send /done when you're finished.\n\n"
            "ЁЯЩЛтАНтЩВя╕П /help - Shows this helpful message again."
        ),
        "handle_files_not_authenticated": "ЁЯФТ Please use /start to authenticate before sending files.",
        "handle_files_received": "ЁЯСН File received! Now, simply reply to this file's message with `/getlink` to create a magical, shareable link.",
        "file_invalid_link": "ЁЯШХ Oops! This file link seems to be invalid or has expired. Please request a new one.",
        "file_access_granted": "тЬЕ Access Granted! ЁЯЪА\n\nSending you the file: <b>{file_name}</b>\n\n<i>Please note: For security, this file cannot be forwarded or saved.</i>",
        "file_send_error": "тЭМ Oh no! An error occurred while sending the file. It might have been removed from Telegram's servers.",
        "file_countdown_text": "тП│ This file is ephemeral! It will self-destruct in <b>{minutes}:00</b>.",
        "file_countdown_update": "тП│ This file will be automatically deleted in <b>{minutes}:00</b>.",
        "file_deleting_now": "ЁЯТе Deleting file now...",
        "info_header": "ЁЯУК <b>Bot Statistics</b> ЁЯУК",
        "info_body": "Total Unique Users: <b>{user_count}</b>",
        "admin_only": "тЭМ Access Denied! This command is for bot admins only.",
        "batch_start": "тЬЕ <b>Batch Mode Activated</b> тЬЕ\n\nSend me your photos or videos (up to {limit}). I will collect them.\n\nSend /done when you are finished or /cancel to abort.",
        "batch_file_added": "ЁЯСН File {count}/{limit} added. Send more, or use /done to get your link.",
        "batch_limit_reached": "тЪая╕П You've reached the {limit} file limit. Please use /done to generate the link.",
        "batch_no_files": "ЁЯдФ You haven't sent any files for this batch. Send some files first, then use /done.",
        "batch_done_header": "тЬи <b>Your Batch Link is Ready!</b> тЬи",
        "batch_done_body": "Here is the link for your batch of <b>{count}</b> files. Share it wisely! ЁЯСЗ",
        "batch_button": "ЁЯЧВя╕П Get {count} Files ЁЯЧВя╕П",
        "batch_cancelled": "тЭМ Batch mode cancelled. Your collected files have been discarded.",
        "batch_invalid_file": "тЪая╕П In batch mode, you can only send photos and videos.",
    },
    'hi': {
        "choose_language": "рдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        "auth_required_header": "ЁЯФР <b>рдорд╛рдирд╡ рд╕рддреНрдпрд╛рдкрди рдЖрд╡рд╢реНрдпрдХ!</b> ЁЯФР",
        "auth_required_body": (
            "рдЪреАрдЬреЛрдВ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдлрд╝рд╛рдЗрд▓ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд╛рдмрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдк рд░реЛрдмреЛрдЯ рдирд╣реАрдВ рд╣реИрдВред\n\n"
            "1я╕ПтГг рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдЬрд╛рджреБрдИ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n"
            "2я╕ПтГг рдЖрдкрдХреЛ рдПрдХ рддреНрд╡рд░рд┐рдд рд╡рд┐рдЬреНрдЮрд╛рдкрди рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛ - рдмрд╕ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдФрд░ 'Skip' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n"
            "3я╕ПтГг рдмреВрдо! рдЖрдкрдХреЛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╡рд╛рдкрд╕ рднреЗрдЬ рджрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред\n\n"
            "рдмрд╣реБрдд рдЖрд╕рд╛рди! тЬи"
        ),
        "auth_button": "тЬи рдкреНрд░рдорд╛рдгрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ тЬи",
        "auth_link_error": "ЁЯШе рдЕрд░реЗ рдирд╣реАрдВ! рдЖрдкрдХрд╛ рд╡рд┐рд╢реЗрд╖ рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд▓рд┐рдВрдХ рдмрдирд╛рддреЗ рд╕рдордп рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "auth_success_header": "ЁЯОЙ <b>рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд╕рдлрд▓!</b> ЁЯОЙ",
        "auth_success_body": "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, {user_mention}! рдЕрдм рдЖрдк рдлрд╝рд╛рдЗрд▓реЗрдВ рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдФрд░ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкреВрд░реА рддрд░рд╣ рддреИрдпрд╛рд░ рд╣реИрдВред",
        "auth_fail_header": "тЭМ <b>рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд╡рд┐рдлрд▓!</b> тЭМ",
        "auth_fail_body": "рд╡рд╣ рдЯреЛрдХрди рдЕрдорд╛рдиреНрдп рд╣реИ рдпрд╛ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдПрдХ рдирдпрд╛ рд▓рд┐рдВрдХ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /start рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "already_authenticated": "ЁЯСН рдЖрдк рдкреВрд░реА рддрд░рд╣ рддреИрдпрд╛рд░ рд╣реИрдВ! рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдкреНрд░рдорд╛рдгрд┐рдд рд╣реИрдВ рдФрд░ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ! ЁЯЪА",
        "getlink_not_authenticated": "тЬЛ рд░реБрдХрд┐рдП! рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкреНрд░рдорд╛рдгрд┐рдд рд╣реЛрдирд╛ рд╣реЛрдЧрд╛ред рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╕ /start рдЯрд╛рдЗрдк рдХрд░реЗрдВ!",
        "getlink_reply_prompt": "ЁЯТб рдПрдХ рд▓рд┐рдВрдХ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдлрд╝рд╛рдЗрд▓ рд╡рд╛рд▓реЗ рд╕рдВрджреЗрд╢ рдкрд░ `/getlink` рдХрдорд╛рдВрдб рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред",
        "getlink_no_file": "ЁЯдФ рд╣рдореНрдо, рдЬрд┐рд╕ рд╕рдВрджреЗрд╢ рдХрд╛ рдЖрдкрдиреЗ рдЙрддреНрддрд░ рджрд┐рдпрд╛ рд╣реИ, рдЙрд╕рдореЗрдВ рдРрд╕реА рдХреЛрдИ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рд╣реИ рдЬрд┐рд╕реЗ рдореИрдВ рд╕рдВрднрд╛рд▓ рд╕рдХреВрдБред рдХреГрдкрдпрд╛ рдПрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝, рдлрд╝реЛрдЯреЛ, рд╡реАрдбрд┐рдпреЛ, рдпрд╛ рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВред",
        "getlink_success_header": "тЬи <b>рдЖрдкрдХрд╛ рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдпреЛрдЧреНрдп рд▓рд┐рдВрдХ рддреИрдпрд╛рд░ рд╣реИ!</b> тЬи",
        "getlink_success_body": "<b>рдлрд╝рд╛рдЗрд▓:</b> <code>{file_name}</code>\n\nрдЗрд╕ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдХрд┐рд╕реА рднреА рд╡реНрдпрдХреНрддрд┐ рдХреЛ рдлрд╝рд╛рдЗрд▓ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдкреНрд░рдорд╛рдгрд┐рдд рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред рдЗрд╕реЗ рдмреБрджреНрдзрд┐рдорд╛рдиреА рд╕реЗ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ! ЁЯСЗ",
        "getlink_button": "ЁЯУВ рдлрд╝рд╛рдЗрд▓ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ ЁЯУВ",
        "help_header": "ЁЯУЦ <b>рдмреЙрдЯ рдХрдорд╛рдВрдб рдФрд░ рдЧрд╛рдЗрдб</b> ЁЯУЦ",
        "help_body": (
            "рдЖрдк рдореЗрд░рд╛ рдЙрдкрдпреЛрдЧ рдЗрд╕ рдкреНрд░рдХрд╛рд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n"
            "ЁЯФС /start - рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рдХрд░рддрд╛ рд╣реИред\n\n"
            "ЁЯФЧ /getlink - рдПрдХ рд╕реБрд░рдХреНрд╖рд┐рдд рд▓рд┐рдВрдХ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рдлрд╝рд╛рдЗрд▓ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВред\n\n"
            "ЁЯЧВя╕П /batch - рдПрдХ рд╣реА рд▓рд┐рдВрдХ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрдИ рдлрд╝рд╛рдЗрд▓реЗрдВ (15 рддрдХ) рдЗрдХрдЯреНрдард╛ рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВред рд╕рдорд╛рдкреНрдд рд╣реЛрдиреЗ рдкрд░ /done рднреЗрдЬреЗрдВред\n\n"
            "ЁЯЩЛтАНтЩВя╕П /help - рдпрд╣ рд╕рд╣рд╛рдпрдХ рд╕рдВрджреЗрд╢ рдлрд┐рд░ рд╕реЗ рджрд┐рдЦрд╛рддрд╛ рд╣реИред"
        ),
        "handle_files_not_authenticated": "ЁЯФТ рдлрд╝рд╛рдЗрд▓реЗрдВ рднреЗрдЬрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдкреНрд░рдорд╛рдгрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ /start рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "handle_files_received": "ЁЯСН рдлрд╝рд╛рдЗрд▓ рдкреНрд░рд╛рдкреНрдд рд╣реБрдИ! рдЕрдм, рдПрдХ рдЬрд╛рджреБрдИ, рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдпреЛрдЧреНрдп рд▓рд┐рдВрдХ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╕ рдЗрд╕ рдлрд╝рд╛рдЗрд▓ рдХреЗ рд╕рдВрджреЗрд╢ рдкрд░ `/getlink` рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред",
        "file_invalid_link": "ЁЯШХ рдУрд╣! рдпрд╣ рдлрд╝рд╛рдЗрд▓ рд▓рд┐рдВрдХ рдЕрдорд╛рдиреНрдп рдпрд╛ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд▓рдЧрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдПрдХ рдирдпрд╛ рдЕрдиреБрд░реЛрдз рдХрд░реЗрдВред",
        "file_access_granted": "тЬЕ рдкреНрд░рд╡реЗрд╢ рд╕реНрд╡реАрдХреГрдд! ЁЯЪА\n\nрдЖрдкрдХреЛ рдлрд╝рд╛рдЗрд▓ рднреЗрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИ: <b>{file_name}</b>\n\n<i>рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ: рд╕реБрд░рдХреНрд╖рд╛ рдХрд╛рд░рдгреЛрдВ рд╕реЗ, рдпрд╣ рдлрд╝рд╛рдЗрд▓ рдлреЙрд░рд╡рд░реНрдб рдпрд╛ рд╕рд╣реЗрдЬреА рдирд╣реАрдВ рдЬрд╛ рд╕рдХрддреА рд╣реИред</i>",
        "file_send_error": "тЭМ рдЕрд░реЗ рдирд╣реАрдВ! рдлрд╝рд╛рдЗрд▓ рднреЗрдЬрддреЗ рд╕рдордп рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рд╣реЛ рд╕рдХрддрд╛ рд╣реИ рдХрд┐ рдЗрд╕реЗ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдХреЗ рд╕рд░реНрд╡рд░ рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реЛред",
        "file_countdown_text": "тП│ рдпрд╣ рдлрд╝рд╛рдЗрд▓ рдЕрд╕реНрдерд╛рдпреА рд╣реИ! рдпрд╣ <b>{minutes}:00</b> рдореЗрдВ рд╕реНрд╡рддрдГ рдирд╖реНрдЯ рд╣реЛ рдЬрд╛рдПрдЧреАред",
        "file_countdown_update": "тП│ рдпрд╣ рдлрд╝рд╛рдЗрд▓ <b>{minutes}:00</b> рдореЗрдВ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд╣рдЯрд╛ рджреА рдЬрд╛рдПрдЧреАред",
        "file_deleting_now": "ЁЯТе рдЕрдм рдлрд╝рд╛рдЗрд▓ рд╣рдЯрд╛рдИ рдЬрд╛ рд░рд╣реА рд╣реИ...",
        "info_header": "ЁЯУК <b>рдмреЙрдЯ рдЖрдБрдХрдбрд╝реЗ</b> ЁЯУК",
        "info_body": "рдХреБрд▓ рдЕрджреНрд╡рд┐рддреАрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: <b>{user_count}</b>",
        "admin_only": "тЭМ рдкреНрд░рд╡реЗрд╢ рд╡рд░реНрдЬрд┐рдд! рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдмреЙрдЯ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред",
        "batch_start": "тЬЕ <b>рдмреИрдЪ рдореЛрдб рд╕рдХреНрд░рд┐рдп</b> тЬЕ\n\nрдореБрдЭреЗ рдЕрдкрдиреА рддрд╕реНрд╡реАрд░реЗрдВ рдпрд╛ рд╡реАрдбрд┐рдпреЛ рднреЗрдЬреЗрдВ ({limit} рддрдХ)ред рдореИрдВ рдЙрдиреНрд╣реЗрдВ рдЗрдХрдЯреНрдард╛ рдХрд░реВрдБрдЧрд╛ред\n\nрдЬрдм рдЖрдк рд╕рдорд╛рдкреНрдд рдХрд░ рд▓реЗрдВ рддреЛ /done рднреЗрдЬреЗрдВ рдпрд╛ рд░рджреНрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /cancel рднреЗрдЬреЗрдВред",
        "batch_file_added": "ЁЯСН рдлрд╝рд╛рдЗрд▓ {count}/{limit} рдЬреЛрдбрд╝реА рдЧрдИред рдФрд░ рднреЗрдЬреЗрдВ, рдпрд╛ рдЕрдкрдирд╛ рд▓рд┐рдВрдХ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /done рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "batch_limit_reached": "тЪая╕П рдЖрдк {limit} рдлрд╝рд╛рдЗрд▓ рд╕реАрдорд╛ рддрдХ рдкрд╣реБрдБрдЪ рдЧрдП рд╣реИрдВред рдХреГрдкрдпрд╛ рд▓рд┐рдВрдХ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /done рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "batch_no_files": "ЁЯдФ рдЖрдкрдиреЗ рдЗрд╕ рдмреИрдЪ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рднреЗрдЬреА рд╣реИред рдкрд╣рд▓реЗ рдХреБрдЫ рдлрд╝рд╛рдЗрд▓реЗрдВ рднреЗрдЬреЗрдВ, рдлрд┐рд░ /done рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "batch_done_header": "тЬи <b>рдЖрдкрдХрд╛ рдмреИрдЪ рд▓рд┐рдВрдХ рддреИрдпрд╛рд░ рд╣реИ!</b> тЬи",
        "batch_done_body": "рдЖрдкрдХреА <b>{count}</b> рдлрд╝рд╛рдЗрд▓реЛрдВ рдХреЗ рдмреИрдЪ рдХрд╛ рд▓рд┐рдВрдХ рдпрд╣рд╛рдБ рд╣реИред рдЗрд╕реЗ рдмреБрджреНрдзрд┐рдорд╛рдиреА рд╕реЗ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ! ЁЯСЗ",
        "batch_button": "ЁЯЧВя╕П {count} рдлрд╝рд╛рдЗрд▓реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ ЁЯЧВя╕П",
        "batch_cancelled": "тЭМ рдмреИрдЪ рдореЛрдб рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ред рдЖрдкрдХреА рдПрдХрддреНрд░рд┐рдд рдлрд╝рд╛рдЗрд▓реЗрдВ рдЫреЛрдбрд╝ рджреА рдЧрдИ рд╣реИрдВред",
        "batch_invalid_file": "тЪая╕П рдмреИрдЪ рдореЛрдб рдореЗрдВ, рдЖрдк рдХреЗрд╡рд▓ рддрд╕реНрд╡реАрд░реЗрдВ рдФрд░ рд╡реАрдбрд┐рдпреЛ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВред",
    }
}

# --- Logging Setup ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Persistence Helpers ---

def load_json_data(filename: str) -> dict:
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_json_data(data: dict, filename: str) -> None:
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def load_user_data() -> dict:
    data = load_json_data(USER_DATA_FILE)
    for user_info in data.values():
        if user_info.get('auth_timestamp'):
            user_info['auth_timestamp'] = datetime.fromisoformat(user_info['auth_timestamp'])
    return data

def save_user_data(data: dict) -> None:
    data_to_save = {k: v.copy() for k, v in data.items()}
    for user_info in data_to_save.values():
        if isinstance(user_info.get('auth_timestamp'), datetime):
            user_info['auth_timestamp'] = user_info['auth_timestamp'].isoformat()
    save_json_data(data_to_save, USER_DATA_FILE)

user_data = load_user_data()
file_links = load_json_data(FILE_LINKS_FILE)

# --- Helper Functions ---

def get_lang(user_id: int) -> str:
    return user_data.get(str(user_id), {}).get('language', 'en')

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def schedule_file_deletion(context: ContextTypes.DEFAULT_TYPE, chat_id: int, sent_message_id: int, countdown_message_id: int):
    lang = get_lang(chat_id)
    try:
        # Countdown logic remains the same
        for i in range(FILE_AUTO_DELETE_MINUTES, 0, -1):
            await asyncio.sleep(60)
            minutes_left = i - 1
            if minutes_left > 0:
                countdown_text = translations[lang]['file_countdown_update'].format(minutes=f"{minutes_left:02d}")
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id, message_id=countdown_message_id,
                        text=countdown_text, parse_mode=ParseMode.HTML
                    )
                except Exception:
                    logger.info(f"Countdown message in chat {chat_id} was deleted. Stopping deletion task.")
                    return
            else:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id, message_id=countdown_message_id,
                        text=translations[lang]['file_deleting_now'], parse_mode=ParseMode.HTML
                    )
                except Exception: pass

        logger.info(f"Auto-deleting messages {[sent_message_id, countdown_message_id]} in chat {chat_id}")
        await context.bot.delete_message(chat_id=chat_id, message_id=sent_message_id)
        await context.bot.delete_message(chat_id=chat_id, message_id=countdown_message_id)
    except Exception as e:
        logger.warning(f"Could not complete the deletion process for chat {chat_id}: {e}")

def is_user_authenticated(user_id: int) -> bool:
    user_id_str = str(user_id)
    if user_id_str not in user_data: return False
    user = user_data[user_id_str]
    if not user.get('is_authenticated') or not user.get('auth_timestamp'): return False
    expiration_time = user['auth_timestamp'] + timedelta(hours=AUTHENTICATION_EXPIRATION_HOURS)
    if datetime.now() > expiration_time:
        user_data.pop(user_id_str, None)
        save_user_data(user_data)
        logger.info(f"User {user_id}'s session has expired.")
        return False
    return True

async def generate_short_link(url: str) -> str | None:
    params = {'api': LITESHORT_API_KEY, 'url': url, 'format': 'text'}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(LITESHORT_API_URL, params=params)
            response.raise_for_status()
            return response.text if response.text else None
    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        logger.error(f"Error connecting to Liteshort API: {e}")
        return None

async def send_file_by_id(file_unique_id: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = get_lang(chat_id)
    file_info = file_links.get(file_unique_id)
    if not file_info:
        await context.bot.send_message(chat_id, translations[lang]['file_invalid_link'])
        logger.warning(f"File not found for unique_id: {file_unique_id} requested by chat_id: {chat_id}")
        return
    
    # Handle both single files (dict) and batches (list)
    files_to_send = file_info if isinstance(file_info, list) else [file_info]

    for single_file_info in files_to_send:
        file_id = single_file_info['file_id']
        file_type = single_file_info['file_type']
        file_name = single_file_info.get('file_name', 'your file')
        
        await context.bot.send_message(
            chat_id, translations[lang]['file_access_granted'].format(file_name=file_name), parse_mode=ParseMode.HTML
        )

        sent_message = None
        try:
            # --- MODIFICATION START ---
            # Added 'has_spoiler=True' for photo and video
            if file_type == 'document':
                sent_message = await context.bot.send_document(chat_id, document=file_id, protect_content=True)
            elif file_type == 'photo':
                sent_message = await context.bot.send_photo(chat_id, photo=file_id, protect_content=True, has_spoiler=True)
            elif file_type == 'video':
                sent_message = await context.bot.send_video(chat_id, video=file_id, protect_content=True, has_spoiler=True)
            elif file_type == 'audio':
                sent_message = await context.bot.send_audio(chat_id, audio=file_id, protect_content=True)
            # --- MODIFICATION END ---
        except Exception as e:
            logger.error(f"Failed to send file {file_id} to {chat_id}: {e}")
            await context.bot.send_message(chat_id, translations[lang]['file_send_error'])
            continue # Try sending next file in batch

        if sent_message:
            delete_in_minutes = FILE_AUTO_DELETE_MINUTES
            initial_countdown_text = translations[lang]['file_countdown_text'].format(minutes=delete_in_minutes)
            countdown_message = await context.bot.send_message(chat_id=chat_id, text=initial_countdown_text, parse_mode=ParseMode.HTML)
            asyncio.create_task(schedule_file_deletion(context, chat_id, sent_message.message_id, countdown_message.message_id))
        
        await asyncio.sleep(1) # Small delay between sending files in a batch

async def generate_and_send_auth_link(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str = None) -> None:
    # This function remains largely the same
    user = update.effective_user
    user_id_str, lang = str(user.id), get_lang(user.id)
    bot_info = await context.bot.get_me()

    auth_token = secrets.token_urlsafe(16)
    if user_id_str not in user_data: user_data[user_id_str] = {}
    user_data[user_id_str].update({'auth_token': auth_token, 'is_authenticated': False, 'auth_timestamp': None})
    
    destination_url = f"https://t.me/{bot_info.username}?start={auth_token}"
    short_url = await generate_short_link(destination_url)

    if short_url:
        logger.info(f"Generated auth link for user {user.id}: {short_url}")
        keyboard = [[InlineKeyboardButton(translations[lang]['auth_button'], url=short_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text_to_send = message_text or f"{translations[lang]['auth_required_header']}\n\n{translations[lang]['auth_required_body']}"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text_to_send, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_html(text_to_send, reply_markup=reply_markup)
        save_user_data(user_data)
    else:
        if update.callback_query:
            await update.callback_query.edit_message_text(translations[lang]['auth_link_error'])
        else:
            await update.message.reply_text(translations[lang]['auth_link_error'])

# --- Command and Message Handlers ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user, args = update.effective_user, context.args
    user_id_str, lang = str(user.id), get_lang(user.id)

    # --- MODIFICATION: Handle different deep link payloads (file, batch) ---
    if args and ('file_' in args[0] or 'batch_' in args[0]):
        file_unique_id = args[0] # This can now be 'file_...' or 'batch_...'
        if is_user_authenticated(user.id):
            await send_file_by_id(file_unique_id, user.id, context)
        else:
            logger.info(f"User {user.id} needs auth for content {file_unique_id}.")
            if user_id_str not in user_data: user_data[user_id_str] = {}
            user_data[user_id_str]['pending_file_request'] = file_unique_id
            await generate_and_send_auth_link(update, context)
        return

    if args: # Handle authentication token
        token_received = args[0]
        if user_id_str in user_data and user_data[user_id_str].get('auth_token') == token_received:
            user_data[user_id_str]['is_authenticated'] = True
            user_data[user_id_str]['auth_timestamp'] = datetime.now()
            logger.info(f"User {user.id} successfully authenticated.")
            await update.message.reply_html(f"{translations[lang]['auth_success_header']}\n\n{translations[lang]['auth_success_body'].format(user_mention=user.mention_html())}")
            
            pending_file = user_data[user_id_str].pop('pending_file_request', None)
            if pending_file:
                logger.info(f"Fulfilling pending file request {pending_file} for user {user.id}")
                await send_file_by_id(pending_file, user.id, context)
            save_user_data(user_data)
        else:
            await update.message.reply_html(f"{translations[lang]['auth_fail_header']}\n\n{translations[lang]['auth_fail_body']}")
        return

    if is_user_authenticated(user.id):
        await update.message.reply_html(translations[lang]['already_authenticated'])
    else:
        keyboard = [[InlineKeyboardButton("English ЁЯЗмЁЯЗз", callback_data='lang_en'), InlineKeyboardButton("рд╣рд┐рдиреНрджреА ЁЯЗоЁЯЗ│", callback_data='lang_hi')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(translations['en']['choose_language'], reply_markup=reply_markup)

async def language_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id_str = str(query.from_user.id)
    lang_code = query.data.split('_')[1]
    
    if user_id_str not in user_data: user_data[user_id_str] = {}
    user_data[user_id_str]['language'] = lang_code
    save_user_data(user_data)
    
    lang = get_lang(query.from_user.id)
    auth_message = f"{translations[lang]['auth_required_header']}\n\n{translations[lang]['auth_required_body']}"
    await generate_and_send_auth_link(update, context, message_text=auth_message)

async def get_link_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # This function is now for single files only
    user, lang = update.effective_user, get_lang(update.effective_user.id)
    if not is_user_authenticated(user.id):
        await update.message.reply_text(translations[lang]['getlink_not_authenticated'])
        return

    replied_message = update.message.reply_to_message
    if not replied_message:
        await update.message.reply_text(translations[lang]['getlink_reply_prompt'])
        return

    file_to_share, file_type, file_name_attr = None, None, 'your file'
    if replied_message.document: file_to_share, file_type, file_name_attr = replied_message.document, 'document', replied_message.document.file_name
    elif replied_message.photo: file_to_share, file_type = replied_message.photo[-1], 'photo'
    elif replied_message.video: file_to_share, file_type, file_name_attr = replied_message.video, 'video', replied_message.video.file_name
    elif replied_message.audio: file_to_share, file_type, file_name_attr = replied_message.audio, 'audio', replied_message.audio.file_name

    if not file_to_share:
        await update.message.reply_text(translations[lang]['getlink_no_file'])
        return
    
    file_id_key = f"file_{file_to_share.file_unique_id}"
    file_links[file_id_key] = {"file_id": file_to_share.file_id, "file_type": file_type, "file_name": file_name_attr}
    save_json_data(file_links, FILE_LINKS_FILE)

    bot_info = await context.bot.get_me()
    link = f"https://t.me/{bot_info.username}?start={file_id_key}"
    keyboard = [[InlineKeyboardButton(translations[lang]['getlink_button'], url=link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(f"{translations[lang]['getlink_success_header']}\n\n{translations[lang]['getlink_success_body'].format(file_name=file_name_attr)}", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = get_lang(update.effective_user.id)
    await update.message.reply_html(f"{translations[lang]['help_header']}\n\n{translations[lang]['help_body']}")

async def handle_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user, lang = update.effective_user, get_lang(update.effective_user.id)
    user_id_str = str(user.id)

    if not is_user_authenticated(user.id):
        await update.message.reply_text(translations[lang]['handle_files_not_authenticated'])
        return
    
    # --- MODIFICATION: Check if user is in batch mode ---
    if user_data.get(user_id_str, {}).get('in_batch_mode', False):
        batch_files = user_data[user_id_str].get('batch_files', [])
        
        if len(batch_files) >= BATCH_FILE_LIMIT:
            await update.message.reply_text(translations[lang]['batch_limit_reached'].format(limit=BATCH_FILE_LIMIT))
            return
            
        file_to_add, file_type, file_name_attr = None, None, 'your file'
        message = update.message
        if message.photo: file_to_add, file_type = message.photo[-1], 'photo'
        elif message.video: file_to_add, file_type, file_name_attr = message.video, 'video', message.video.file_name
        else:
            await update.message.reply_text(translations[lang]['batch_invalid_file'])
            return

        batch_files.append({
            "file_id": file_to_add.file_id,
            "file_type": file_type,
            "file_name": file_name_attr
        })
        user_data[user_id_str]['batch_files'] = batch_files
        save_user_data(user_data)
        
        await update.message.reply_text(translations[lang]['batch_file_added'].format(count=len(batch_files), limit=BATCH_FILE_LIMIT))
    else:
        # Original behavior for single files
        await update.message.reply_text(translations[lang]['handle_files_received'])

# --- NEW: Batch Mode and Info Commands ---

async def batch_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user, lang = update.effective_user, get_lang(update.effective_user.id)
    user_id_str = str(user.id)
    
    if not is_user_authenticated(user.id):
        await update.message.reply_text(translations[lang]['getlink_not_authenticated'])
        return
        
    user_data[user_id_str] = user_data.get(user_id_str, {})
    user_data[user_id_str]['in_batch_mode'] = True
    user_data[user_id_str]['batch_files'] = []
    save_user_data(user_data)
    
    await update.message.reply_html(translations[lang]['batch_start'].format(limit=BATCH_FILE_LIMIT))

async def done_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user, lang = update.effective_user, get_lang(update.effective_user.id)
    user_id_str = str(user.id)

    if not user_data.get(user_id_str, {}).get('in_batch_mode', False):
        return # Ignore if not in batch mode

    batch_files = user_data[user_id_str].get('batch_files', [])
    if not batch_files:
        await update.message.reply_text(translations[lang]['batch_no_files'])
        return
        
    batch_id = f"batch_{secrets.token_urlsafe(8)}"
    file_links[batch_id] = batch_files
    save_json_data(file_links, FILE_LINKS_FILE)
    
    # Clean up user state
    user_data[user_id_str]['in_batch_mode'] = False
    user_data[user_id_str]['batch_files'] = []
    save_user_data(user_data)

    bot_info = await context.bot.get_me()
    link = f"https://t.me/{bot_info.username}?start={batch_id}"
    file_count = len(batch_files)
    keyboard = [[InlineKeyboardButton(translations[lang]['batch_button'].format(count=file_count), url=link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(
        f"{translations[lang]['batch_done_header']}\n\n{translations[lang]['batch_done_body'].format(count=file_count)}",
        reply_markup=reply_markup
    )

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user, lang = update.effective_user, get_lang(update.effective_user.id)
    user_id_str = str(user.id)
    
    if user_data.get(user_id_str, {}).get('in_batch_mode', False):
        user_data[user_id_str]['in_batch_mode'] = False
        user_data[user_id_str]['batch_files'] = []
        save_user_data(user_data)
        await update.message.reply_text(translations[lang]['batch_cancelled'])

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user, lang = update.effective_user, get_lang(update.effective_user.id)
    if not is_admin(user.id):
        await update.message.reply_text(translations[lang]['admin_only'])
        return
        
    user_count = len(user_data)
    await update.message.reply_html(
        f"{translations[lang]['info_header']}\n\n{translations[lang]['info_body'].format(user_count=user_count)}"
    )

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(language_select_callback, pattern='^lang_'))
    application.add_handler(CommandHandler("getlink", get_link_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # --- NEW: Add handlers for new commands ---
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("batch", batch_command))
    application.add_handler(CommandHandler("done", done_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    # This handler now needs to check for batch mode
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL | filters.AUDIO, handle_files))

    logger.info("Bot is starting with new features...")
    application.run_polling()

if __name__ == '__main__':
    main()
